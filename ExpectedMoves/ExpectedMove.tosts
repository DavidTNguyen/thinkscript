# Inputs for Implied Volatility
input dailyIV = 0.0096; # Daily Implied Volatility (e.g., 0.96% as decimal)
input weeklyIV = 0.0217; # Weekly Implied Volatility (e.g., 2.17% as decimal, approx for 5 days)
input price = close; # Use current close price as the reference

# Calculate Daily Expected Move (1 Standard Deviation, 68% confidence)
def dailyMove = price * dailyIV; # One-sided move (up or down)
def dailyUpperRange = price + dailyMove; # Upper bound
def dailyLowerRange = price - dailyMove; # Lower bound

# Calculate Weekly Expected Move (1 Standard Deviation, 68% confidence)
def weeklyMove = price * weeklyIV; # One-sided move (up or down)
def weeklyUpperRange = price + weeklyMove; # Upper bound
def weeklyLowerRange = price - weeklyMove; # Lower bound

# Round to 2 decimal places for display
def dailyLowerRounded = Round(dailyLowerRange, 2);
def dailyUpperRounded = Round(dailyUpperRange, 2);
def weeklyLowerRounded = Round(weeklyLowerRange, 2);
def weeklyUpperRounded = Round(weeklyUpperRange, 2);

# Plot the ranges (optional, for chart visualization)
plot DailyUpper = dailyUpperRange;
plot DailyLower = dailyLowerRange;
plot WeeklyUpper = weeklyUpperRange;
plot WeeklyLower = weeklyLowerRange;

# Add Labels for Visualization
AddLabel(yes, "Daily Range: $" + AsText(dailyLowerRounded, NumberFormat.DOLLAR) + " to $" + AsText(dailyUpperRounded, NumberFormat.DOLLAR), Color.WHITE);
AddLabel(yes, "Weekly Range: $" + AsText(weeklyLowerRounded, NumberFormat.DOLLAR) + " to $" + AsText(weeklyUpperRounded, NumberFormat.DOLLAR), Color.WHITE);
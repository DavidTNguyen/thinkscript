# Fair Value Gap (FVG) Example

input lookback = 3; # How many bars back to check

def prevHigh = high[lookback + 1];
def prevLow = low[lookback + 1];
def currHigh = high[lookback];
def currLow = low[lookback];
def nextHigh = high;
def nextLow = low;

# Bullish FVG: previous high < next low
def bullishFVG = prevHigh < nextLow;
# Bearish FVG: previous low > next high
def bearishFVG = prevLow > nextHigh;

# Draw gaps as colored rectangles using AddCloud
# Bullish gaps - light green
def bullishUpperBound = if bullishFVG then nextLow else Double.NaN;
def bullishLowerBound = if bullishFVG then prevHigh else Double.NaN;

# Bearish gaps - light pink
def bearishUpperBound = if bearishFVG then prevLow else Double.NaN;
def bearishLowerBound = if bearishFVG then nextHigh else Double.NaN;

AddCloud(bullishUpperBound, bullishLowerBound, Color.LIGHT_GREEN, Color.LIGHT_GREEN, yes);
AddCloud(bearishUpperBound, bearishLowerBound, Color.PINK, Color.PINK, yes);

# Gap mitigation detection
# Bullish gap is mitigated when price comes back down into the gap
def bullishGapMitigated = bullishFVG[1] and !IsNaN(bullishUpperBound[1]) and low <= bullishLowerBound[1];

# Bearish gap is mitigated when price comes back up into the gap  
def bearishGapMitigated = bearishFVG[1] and !IsNaN(bearishUpperBound[1]) and high >= bearishUpperBound[1];

# Alert conditions
def gapMitigated = bullishGapMitigated or bearishGapMitigated;

Alert(gapMitigated, "Fair Value Gap Mitigated!", Alert.BAR, Sound.Ding);
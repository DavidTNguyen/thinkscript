# Author - VietRoadie - SuperLuckeee Community
# 08/14/2025

input useManualTimeFrame = no;
input manualTimeFrame = AggregationPeriod.HOUR;
input autoTimeFrameMultiplier = 4;

# Dynamically set timeFrame
def chartAgg = GetAggregationPeriod();
def autoTimeFrame = chartAgg * autoTimeFrameMultiplier;
def timeFrame = if useManualTimeFrame then manualTimeFrame else autoTimeFrame;

# Get the low of the last 3 periods
def lowN3 = low(period = timeFrame);

# Get the high of the first period 2 periods ago
def highN1 = high(period = timeFrame)[2];

# Check if the price is increasing
def priceIsIncreasing = lowN3 > highN1;

# Calculate the Fractal Vertical Gap (FVG) for increasing prices
def fvgIncrease = if priceIsIncreasing then lowN3 - highN1 else Double.NaN;

# Get the high of the last 3 periods
def highN3 = high(period = timeFrame);

# Get the low of the first period 2 periods ago
def lowN1 = low(period = timeFrame)[2];

# Check if the price is decreasing
def priceIsDecreasing = lowN1 > highN3;

# Calculate the Fractal Vertical Gap (FVG) for decreasing prices
def fvgDecrease = if priceIsDecreasing then lowN1 - highN3 else Double.NaN;

# Determine the highest high (H) and lowest low (L) among the given conditions
def H = if priceIsIncreasing then lowN3 else H[1];
def L = if priceIsIncreasing then highN1 else L[1];
def HD = if priceIsDecreasing then lowN1 else HD[1];
def LD = if priceIsDecreasing then highN3 else LD[1];

# Alert if the price is increasing or decreasing
Alert(priceIsIncreasing or priceIsDecreasing, "", Alert.BAR, Sound.Bell);

# Add labels to display H and L with timeframe info
def tfMinutes = timeFrame / 60000;
def tfHours = tfMinutes / 60;
def tfDays = tfMinutes / 1440;

def showMinutes = tfMinutes < 60;
def showHours = tfMinutes >= 60 and tfMinutes < 1440;
def showDays = tfMinutes >= 1440;

AddLabel(showMinutes, "FVG TF: " + tfMinutes + "m" + (if useManualTimeFrame then " (Manual)" else " (Auto)"), Color.GRAY);
AddLabel(showHours, "FVG TF: " + tfHours + "H" + (if useManualTimeFrame then " (Manual)" else " (Auto)"), Color.GRAY);
AddLabel(showDays, "FVG TF: " + tfDays + "D" + (if useManualTimeFrame then " (Manual)" else " (Auto)"), Color.GRAY);

AddLabel(yes, " H: " + Round(H, 2) + " L: " + Round(L, 2), if priceIsIncreasing then Color.GREEN else if priceIsDecreasing then Color.RED else Color.WHITE);

# Plot H and L
plot H1 = H;
plot L1 = L;
H1.SetHiding(yes);
L1.SetHiding(yes);
plot H2 = HD;
plot L2 = LD;
H2.SetHiding(yes);
L2.SetHiding(yes);

# Add cloud to highlight the area between H and L
AddCloud(H1, L1, color1 = Color.LIGHT_GREEN, color2 = Color.LIGHT_GREEN);
AddCloud(H2, L2, color1 = Color.LIGHT_RED, color2 = Color.LIGHT_RED);
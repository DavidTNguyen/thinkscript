# Intraday Gamma Strikes Plotter
# Plots volume-weighted GEX strikes for intraday trading
declare upper;

# User inputs
input strikeDepth = 5;        # Strikes above/below ATM (expanded for 3 supports/resistances)
input expDate = 20250919;     # Set to 0 for auto-update to today, or specific YYYYMMDD
input gexThreshold = 500;     # Min absolute GEX to plot (lowered for SPX testing)
input strikeSpacing = 25;     # Strike increment (SPX uses 25 point increments for liquid strikes)
input minVolRatio = 2.0;      # Volume must be >= 2.0 * OI for significant new activity
input showAllStrikes = yes;   # Debug: Show all strikes regardless of GEX
input showHorizontalLines = yes; # Toggle for horizontal lines

# Calculate ATM and strikes
def atmStrike = Round(close / strikeSpacing, 0) * strikeSpacing;
def currentExpDate = if expDate == 0 then GetYYYYMMDD() else expDate;

# Calculate 3 support levels below ATM
def support1 = atmStrike - strikeSpacing;     # Support -25
def support2 = atmStrike - 2 * strikeSpacing; # Support -50
def support3 = atmStrike - 3 * strikeSpacing; # Support -75

# Calculate 3 resistance levels above ATM
def resistance1 = atmStrike + strikeSpacing;     # Resistance +25
def resistance2 = atmStrike + 2 * strikeSpacing; # Resistance +50
def resistance3 = atmStrike + 3 * strikeSpacing; # Resistance +75

# Force horizontal line display using manual levels that will update with price
def currentATM = Round(close / 25, 0) * 25;
def s1Level = currentATM - 25;
def s2Level = currentATM - 50;
def s3Level = currentATM - 75;
def r1Level = currentATM + 25;
def r2Level = currentATM + 50;
def r3Level = currentATM + 75;

# Plot horizontal lines with explicit values
plot ATMLine = currentATM;
plot Support1Line = s1Level;
plot Support2Line = s2Level;
plot Support3Line = s3Level;
plot Resistance1Line = r1Level;
plot Resistance2Line = r2Level;
plot Resistance3Line = r3Level;

# Color coding for each level
ATMLine.SetDefaultColor(Color.WHITE);
Support1Line.SetDefaultColor(Color.CYAN);
Support2Line.SetDefaultColor(Color.ORANGE);
Support3Line.SetDefaultColor(Color.BLUE);
Resistance1Line.SetDefaultColor(Color.MAGENTA);
Resistance2Line.SetDefaultColor(Color.PINK);
Resistance3Line.SetDefaultColor(Color.RED);

# Make lines thick and visible
ATMLine.SetLineWeight(4);
Support1Line.SetLineWeight(3);
Support2Line.SetLineWeight(3);
Support3Line.SetLineWeight(3);
Resistance1Line.SetLineWeight(3);
Resistance2Line.SetLineWeight(3);
Resistance3Line.SetLineWeight(3);

# Set line styles for distinction
ATMLine.SetStyle(Curve.FIRM);
Support1Line.SetStyle(Curve.LONG_DASH);
Support2Line.SetStyle(Curve.LONG_DASH);
Support3Line.SetStyle(Curve.LONG_DASH);
Resistance1Line.SetStyle(Curve.LONG_DASH);
Resistance2Line.SetStyle(Curve.LONG_DASH);
Resistance3Line.SetStyle(Curve.LONG_DASH);

# Enhanced debug labels
AddLabel(yes, "Current Price: " + Round(close, 2), Color.WHITE);
AddLabel(yes, "ATM Strike: " + Round(currentATM, 0), Color.WHITE);

# Support labels with visual indicators
AddLabel(yes, "S1: " + Round(s1Level, 0), Color.CYAN);
AddLabel(yes, "S2: " + Round(s2Level, 0), Color.ORANGE);
AddLabel(yes, "S3: " + Round(s3Level, 0), Color.BLUE);

# Resistance labels with visual indicators
AddLabel(yes, "R1: " + Round(r1Level, 0), Color.MAGENTA);
AddLabel(yes, "R2: " + Round(r2Level, 0), Color.PINK);
AddLabel(yes, "R3: " + Round(r3Level, 0), Color.RED);

# Fixed bubble logic - show on last bar
def isLastBar = IsNaN(close[-1]) and !IsNaN(close);

# Enhanced price bubbles for all levels
AddChartBubble(isLastBar, currentATM, "ATM " + Round(currentATM, 0), Color.WHITE, yes);

# Support bubbles (below ATM)
AddChartBubble(isLastBar, s1Level, "S1 " + Round(s1Level, 0), Color.CYAN, no);
AddChartBubble(isLastBar, s2Level, "S2 " + Round(s2Level, 0), Color.ORANGE, no);
AddChartBubble(isLastBar, s3Level, "S3 " + Round(s3Level, 0), Color.BLUE, no);

# Resistance bubbles (above ATM)
AddChartBubble(isLastBar, r1Level, "R1 " + Round(r1Level, 0), Color.MAGENTA, yes);
AddChartBubble(isLastBar, r2Level, "R2 " + Round(r2Level, 0), Color.PINK, yes);
AddChartBubble(isLastBar, r3Level, "R3 " + Round(r3Level, 0), Color.RED, yes);
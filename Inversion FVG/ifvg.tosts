# Inversion FVG Indicator with Color-Coded Gap Bars
# Identifies Fair Value Gaps (FVGs) and their inversions based on ICT concepts
# Draws FVGs as color-coded bars (light green for bullish, light red for bearish)
# Optimized for futures (NQ, ES) and crypto (ETH, BTC, SOL)

# --- Inputs ---
input atrLength = 14;           # ATR period for filtering gaps
input atrMultiplier = 0.25;     # ATR multiplier to filter small gaps (0.25-0.5)
input useCloseForRetest = no;   # Yes: Use close for retest signals; No: Use wick
input showSeeds = yes;          # Show pre-inversion FVGs
input extendBars = 20;          # Bars to extend FVG bars
input maxBarsToDisplay = 100;   # Limit display to recent FVGs (avoid clutter)
input enableAlerts = yes;       # Enable alerts for FVG, inversion, and retest

# --- Input Validation ---
Assert(atrLength > 0, "ATR Length must be positive");
Assert(atrMultiplier >= 0, "ATR Multiplier must be non-negative");
Assert(extendBars >= 0, "Extend Bars must be non-negative");
Assert(maxBarsToDisplay > 0, "Max Bars to Display must be positive");

# --- ATR Calculation ---
def atr = ATR(length = atrLength);
def minGapSize = atr * atrMultiplier;

# --- FVG Detection ---
# Bullish FVG: Low of current candle > High of candle two bars ago
def bullFVG = low > high[2] and (low - high[2]) >= minGapSize;
# Bearish FVG: High of current candle < Low of candle two bars ago
def bearFVG = high < low[2] and (low[2] - high) >= minGapSize;

# --- Define FVG Boundaries ---
# Bullish FVG: Bottom = high[2], Top = low
def bullFVGTop = if bullFVG then low else Double.NaN;
def bullFVGBottom = if bullFVG then high[2] else Double.NaN;
# Bearish FVG: Top = low[2], Bottom = high
def bearFVGTop = if bearFVG then low[2] else Double.NaN;
def bearFVGBottom = if bearFVG then high else Double.NaN;

# --- Store FVG Bars ---
def bullFVGBar = if bullFVG then BarNumber() else Double.NaN;
def bearFVGBar = if bearFVG then BarNumber() else Double.NaN;

# --- Inversion Detection ---
# Bullish FVG Inversion: Price breaks below bottom (high[2])
def bullFVGInversion = if !IsNaN(bullFVGBar[1]) then close < bullFVGBottom[1] else 0;
# Bearish FVG Inversion: Price breaks above top (low[2])
def bearFVGInversion = if !IsNaN(bearFVGBar[1]) then close > bearFVGTop[1] else 0;

# --- Retest Signals ---
# Bullish Signal: Price retests top of bearish-inverted FVG (now demand zone)
def bullRetest = if !IsNaN(bearFVGBar[1]) and bearFVGInversion[1] then 
    (if useCloseForRetest then close >= bearFVGTop[1] and close <= bearFVGTop[1] + atr * 0.1 else high >= bearFVGTop[1] and high <= bearFVGTop[1] + atr * 0.1) 
    else 0;
# Bearish Signal: Price retests bottom of bullish-inverted FVG (now supply zone)
def bearRetest = if !IsNaN(bullFVGBar[1]) and bullFVGInversion[1] then 
    (if useCloseForRetest then close <= bullFVGBottom[1] and close >= bullFVGBottom[1] - atr * 0.1 else low <= bullFVGBottom[1] and low >= bullFVGBottom[1] - atr * 0.1) 
    else 0;

# --- Plot FVG Bars ---
# Pre-Inversion Bullish FVG (Light Green Bars)
def bullFVGPlot = if showSeeds and BarNumber() <= HighestAll(bullFVGBar) + extendBars and BarNumber() >= HighestAll(bullFVGBar) and !bullFVGInversion[1] and BarNumber() >= HighestAll(BarNumber()) - maxBarsToDisplay then bullFVGTop - bullFVGBottom else Double.NaN;
plot BullFVGBarPlot = bullFVGPlot;
BullFVGBarPlot.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);
BullFVGBarPlot.SetDefaultColor(Color.LIGHT_GREEN);
BullFVGBarPlot.SetLineWeight(3);
BullFVGBarPlot.AssignValueColor(if !IsNaN(bullFVGPlot) then Color.LIGHT_GREEN else Color.CURRENT);
BullFVGBarPlot.SetStyle(Curve.FIRM);
BullFVGBarPlot.HideBubble();
BullFVGBarPlot.HideTitle();

# Pre-Inversion Bearish FVG (Light Red Bars)
def bearFVGPlot = if showSeeds and BarNumber() <= HighestAll(bearFVGBar) + extendBars and BarNumber() >= HighestAll(bearFVGBar) and !bearFVGInversion[1] and BarNumber() >= HighestAll(BarNumber()) - maxBarsToDisplay then bearFVGTop - bearFVGBottom else Double.NaN;
plot BearFVGBarPlot = bearFVGPlot;
BearFVGBarPlot.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);
BearFVGBarPlot.SetDefaultColor(Color.LIGHT_RED);
BearFVGBarPlot.SetLineWeight(3);
BearFVGBarPlot.AssignValueColor(if !IsNaN(bearFVGPlot) then Color.LIGHT_RED else Color.CURRENT);
BearFVGBarPlot.SetStyle(Curve.FIRM);
BearFVGBarPlot.HideBubble();
BearFVGBarPlot.HideTitle();

# Post-Inversion Bullish FVG (Bearish Supply Zone, Light Red Bars)
def bullFVGInvPlot = if BarNumber() <= HighestAll(bullFVGBar) + extendBars and BarNumber() >= HighestAll(bullFVGBar) and bullFVGInversion[1] and BarNumber() >= HighestAll(BarNumber()) - maxBarsToDisplay then bullFVGTop - bullFVGBottom else Double.NaN;
plot BullFVGInvBarPlot = bullFVGInvPlot;
BullFVGInvBarPlot.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);
BullFVGInvBarPlot.SetDefaultColor(Color.LIGHT_RED);
BullFVGInvBarPlot.SetLineWeight(3);
BullFVGInvBarPlot.AssignValueColor(if !IsNaN(bullFVGInvPlot) then Color.LIGHT_RED else Color.CURRENT);
BullFVGInvBarPlot.SetStyle(Curve.FIRM);
BullFVGInvBarPlot.HideBubble();
BullFVGInvBarPlot.HideTitle();

# Post-Inversion Bearish FVG (Bullish Demand Zone, Light Green Bars)
def bearFVGInvPlot = if BarNumber() <= HighestAll(bearFVGBar) + extendBars and BarNumber() >= HighestAll(bearFVGBar) and bearFVGInversion[1] and BarNumber() >= HighestAll(BarNumber()) - maxBarsToDisplay then bearFVGTop - bearFVGBottom else Double.NaN;
plot BearFVGInvBarPlot = bearFVGInvPlot;
BearFVGInvBarPlot.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);
BearFVGInvBarPlot.SetDefaultColor(Color.LIGHT_GREEN);
BearFVGInvBarPlot.SetLineWeight(3);
BearFVGInvBarPlot.AssignValueColor(if !IsNaN(bearFVGInvPlot) then Color.LIGHT_GREEN else Color.CURRENT);
BearFVGInvBarPlot.SetStyle(Curve.FIRM);
BearFVGInvBarPlot.HideBubble();
BearFVGInvBarPlot.HideTitle();

# --- Plot Midlines ---
plot BullFVGMidline = if BarNumber() <= HighestAll(bullFVGBar) + extendBars and BarNumber() >= HighestAll(bullFVGBar) and BarNumber() >= HighestAll(BarNumber()) - maxBarsToDisplay then (bullFVGTop + bullFVGBottom) / 2 else Double.NaN;
BullFVGMidline.SetDefaultColor(Color.GRAY);
BullFVGMidline.SetStyle(Curve.SHORT_DASH);
BullFVGMidline.SetLineWeight(1);
BullFVGMidline.HideBubble();
BullFVGMidline.HideTitle();

plot BearFVGMidline = if BarNumber() <= HighestAll(bearFVGBar) + extendBars and BarNumber() >= HighestAll(bearFVGBar) and BarNumber() >= HighestAll(BarNumber()) - maxBarsToDisplay then (bearFVGTop + bearFVGBottom) / 2 else Double.NaN;
BearFVGMidline.SetDefaultColor(Color.GRAY);
BearFVGMidline.SetStyle(Curve.SHORT_DASH);
BearFVGMidline.SetLineWeight(1);
BearFVGMidline.HideBubble();
BearFVGMidline.HideTitle();

# --- Plot Inversion Dots ---
plot BullInversionDot = if bullFVGInversion then low else Double.NaN;
BullInversionDot.SetPaintingStrategy(PaintingStrategy.POINTS);
BullInversionDot.SetDefaultColor(Color.DARK_RED);
BullInversionDot.SetLineWeight(3);
BullInversionDot.HideBubble();
BullInversionDot.HideTitle();

plot BearInversionDot = if bearFVGInversion then high else Double.NaN;
BearInversionDot.SetPaintingStrategy(PaintingStrategy.POINTS);
BearInversionDot.SetDefaultColor(Color.DARK_GREEN);
BearInversionDot.SetLineWeight(3);
BearInversionDot.HideBubble();
BearInversionDot.HideTitle();

# --- Color-Coded Bars for Retests ---
AssignPriceColor(
    if bullRetest then Color.CYAN
    else if bearRetest then Color.MAGENTA
    else Color.CURRENT
);

# --- Alerts ---
Alert(enableAlerts and bullFVG, "Bullish FVG Detected", Alert.BAR, Sound.Bell);
Alert(enableAlerts and bearFVG, "Bearish FVG Detected", Alert.BAR, Sound.Bell);
Alert(enableAlerts and bullFVGInversion, "Bullish FVG Inverted (Supply Zone)", Alert.BAR, Sound.Chimes);
Alert(enableAlerts and bearFVGInversion, "Bearish FVG Inverted (Demand Zone)", Alert.BAR, Sound.Chimes);
Alert(enableAlerts and bullRetest, "Bullish Retest Signal (Demand Zone)", Alert.BAR, Sound.Ding);
Alert(enableAlerts and bearRetest, "Bearish Retest Signal (Supply Zone)", Alert.BAR, Sound.Ding);
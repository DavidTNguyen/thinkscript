# Inverted Fair Value Gap (IFVG) Indicator
# Author: GitHub Copilot for DavidTNguyen
# Identifies FVGs, tracks inversion, and signals retests

# --- Inputs ---
input atrLength = 14;           # ATR period for filtering gaps
input atrMultiplier = 0.3;      # ATR multiplier to filter small gaps (0.25-0.5)
input showSeeds = yes;          # Show pre-inversion gaps
input wickRetest = yes;         # Use wick (high/low) or close for retest
input maxGaps = 10;             # Only show most recent N inversions

# --- Input Validation ---
Assert(atrLength > 0, "ATR Length must be positive");
Assert(atrMultiplier >= 0, "ATR Multiplier must be non-negative");
Assert(maxGaps > 0, "Max Gaps to Display must be positive");

# --- ATR Calculation ---
def atr = Average(TrueRange(high, close, low), atrLength);
def minGapSize = atr * atrMultiplier;

# --- FVG Detection ---
# Bullish FVG: Low of candle two bars ago > High of current candle
def bullishFVG = low[2] > high;
# Bearish FVG: High of candle two bars ago < Low of current candle
def bearishFVG = high[2] < low;

# --- Define FVG Boundaries ---
# Bullish FVG: Bottom = high, Top = low[2]
def gapTop = if bullishFVG then low[2] else if bearishFVG then high[2] else Double.NaN;
def gapBot = if bullishFVG then high else if bearishFVG then low else Double.NaN;
def gapMid = (gapTop + gapBot) / 2;

# --- Filter Valid Gaps ---
def gapSize = AbsValue(gapTop - gapBot);
def validGap = gapSize > atrMultiplier * atr;

# --- Track Gaps and Inversions ---
rec gapActive = if (bullishFVG or bearishFVG) and validGap then 1 
    else if gapActive[1] == 1 and !(bullishFVG or bearishFVG) and !IsNaN(gapTop[1]) and (
        (bullishFVG[1] and close < gapBot[1]) or (bearishFVG[1] and close > gapTop[1])
    ) then 2 
    else if gapActive[1] == 2 then 2 
    else 0;

rec invTop = if gapActive == 2 then gapTop[1] else invTop[1];
rec invBot = if gapActive == 2 then gapBot[1] else invBot[1];
rec invType = if gapActive == 2 then (if bullishFVG[1] then -1 else if bearishFVG[1] then 1 else 0) else invType[1];
rec invBar = if gapActive == 2 then BarNumber() else invBar[1];

# --- Plot Gaps and Inversions ---
plot BullGap = if showSeeds and bullishFVG and validGap and gapActive != 2 then gapTop else Double.NaN;
BullGap.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
BullGap.SetDefaultColor(Color.GREEN);
BullGap.SetLineWeight(2);

plot BearGap = if showSeeds and bearishFVG and validGap and gapActive != 2 then gapBot else Double.NaN;
BearGap.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
BearGap.SetDefaultColor(Color.RED);
BearGap.SetLineWeight(2);

plot MidLine = if (bullishFVG or bearishFVG) and validGap and showSeeds then gapMid else Double.NaN;
MidLine.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
MidLine.SetDefaultColor(Color.LIGHT_GRAY);
MidLine.SetLineWeight(1);
MidLine.SetStyle(Curve.SHORT_DASH);

# --- Inversion Zones ---
plot InvZoneTop = if gapActive == 2 and invType != 0 then invTop else Double.NaN;
InvZoneTop.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
InvZoneTop.SetDefaultColor(if invType == 1 then Color.GREEN else if invType == -1 then Color.RED else Color.GRAY);
InvZoneTop.SetLineWeight(2);

plot InvZoneBot = if gapActive == 2 and invType != 0 then invBot else Double.NaN;
InvZoneBot.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
InvZoneBot.SetDefaultColor(if invType == 1 then Color.GREEN else if invType == -1 then Color.RED else Color.GRAY);
InvZoneBot.SetLineWeight(2);

plot InvMid = if gapActive == 2 and invType != 0 then (invTop + invBot) / 2 else Double.NaN;
InvMid.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
InvMid.SetDefaultColor(Color.LIGHT_GRAY);
InvMid.SetLineWeight(1);
InvMid.SetStyle(Curve.SHORT_DASH);

# --- Inversion Dots ---
plot InversionDot = if gapActive == 2 and BarNumber() == invBar then (invTop + invBot) / 2 else Double.NaN;
InversionDot.SetPaintingStrategy(PaintingStrategy.POINTS);
InversionDot.SetDefaultColor(Color.YELLOW);
InversionDot.SetLineWeight(3);

# --- Retest Alerts ---
def retestBull = invType == 1 and (
    (wickRetest and low <= invTop and low >= invBot) or (!wickRetest and close <= invTop and close >= invBot)
);
def retestBear = invType == -1 and (
    (wickRetest and high >= invBot and high <= invTop) or (!wickRetest and close >= invBot and close <= invTop)
);

Alert(retestBull, "IFVG Bullish Inversion Retest!", Alert.BAR, Sound.Bell);
Alert(retestBear, "IFVG Bearish Inversion Retest!", Alert.BAR, Sound.Bell);

AddChartBubble(BarNumber() == invBar and invType == 1, invTop, "Bull Inv", Color.GREEN, yes);
AddChartBubble(BarNumber() == invBar and invType == -1, invBot, "Bear Inv", Color.RED, no);
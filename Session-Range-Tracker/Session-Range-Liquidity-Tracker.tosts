############################################################
# Sessions Liquidity Tracker - Full Implementation Template #
# Author: VietRoadie
# Description: This script tracks liquidity levels across different trading sessions.
# Date: 2026-08-17
############################################################

# --- TIMEZONE ---
input timeZoneOffset = -4; # UTC offset, e.g. -4 for UTC-4

# --- SESSION TIMES ---
input showLondon = yes;
input londonStart = 0;
input londonEnd = 8;

input showNYAM = yes;
input nyamStart = 8;
input nyamEnd = 13;

input showNYPM = yes;
input nypmStart = 13;
input nypmEnd = 19;

input showAsia = yes;
input asiaStart = 19;
input asiaEnd = 24;

input showSession5 = no;
input session5Start = 19;
input session5End = 24;

input showSession6 = no;
input session6Start = 19;
input session6End = 24;

input sessionLimit = 25;
input timeframeVisibility = AggregationPeriod.THIRTY_MIN;

# --- SESSION OPTIONS ---
input showSessions = yes;
input hideCurrentSession = yes;
input extendUnraidedLevels = no;
input sessionLineStyle = Curve.FIRM;
input sessionLineWidth = 1;
input sessionLineColor = Color.GREEN;

input showRaidedLevels = yes;
input extendRaidedLevels = no;
input raidedLineStyle = Curve.FIRM;
input raidedLineWidth = 1;
input raidedLineColor = Color.RED;

input showLabels = yes;
input labelSize = 1; # 0=Small, 1=Medium, 2=Large
input labelColor = Color.GRAY;
input showSeparatorLines = yes;
input separatorLineStyle = Curve.FIRM;
input separatorLineWidth = 1;
input separatorLineColor = Color.DARK_GRAY;
input customMidnightLineStyle = Curve.FIRM;
input customMidnightLineWidth = 1;
input customMidnightLineColor = Color.BLUE;

# --- WEEKLY DIVIDERS ---
input showWeeklyDividers = no;
input useMondayMidnightOpen = no;
input weeklyDividerStyle = Curve.FIRM;
input weeklyDividerWidth = 1;
input weeklyDividerColor = Color.ORANGE;

# --- ALERTS ---
input alertPriceCrossSession = yes;
input alertFVGAfterRaid = yes;
input alertMSSAfterRaid = yes;

# --- LEVELS ---
input labelsOffset = 10;
input hideLevelLabels = no;
input alertPDH_PDL = yes;
input pdh_pdlLabelSize = 0;
input pdh_pdlLineStyle = Curve.FIRM;
input pdh_pdlLineWidth = 1;
input pdh_pdlLineColor = Color.WHITE;

input alertPWH_PWL = yes;
input pwh_pwlLabelSize = 0;
input pwh_pwlLineStyle = Curve.FIRM;
input pwh_pwlLineWidth = 1;
input pwh_pwlLineColor = Color.BLUE;

input alertPMH_PML = yes;
input pmh_pmlLabelSize = 0;
input pmh_pmlLineStyle = Curve.FIRM;
input pmh_pmlLineWidth = 1;
input pmh_pmlLineColor = Color.PURPLE;

input showWeeklyOpen = yes;
input weeklyOpenLabelSize = 0;
input weeklyOpenLineStyle = Curve.FIRM;
input weeklyOpenLineWidth = 1;
input weeklyOpenLineColor = Color.GREEN;

input showMO = yes;
input moLabelSize = 0;
input moLineStyle = Curve.FIRM;
input moLineWidth = 1;
input moLineColor = Color.GREEN;

input show930 = no;
input show830 = no;
input show1000 = no;

# --- FVG ---
input showFVGs = yes;
input showFVGMitigation = yes;
input deleteMitigatedFVG = yes;
input extendUnmitigatedFVG = no;
input mitigatedCondition = "Close";
input fvgLength = 2;
input barsBackFVG = 300;
input fvgEQLineStyle = Curve.FIRM;
input fvgEQLineWidth = 1;
input bullishFVGColor = Color.DARK_GREEN;
input bearishFVGColor = Color.DARK_RED;
input mitigatedFVGColor = Color.GRAY;

# --- NEW WEEK OPENING GAPS ---
input showNWOGs = yes;
input nwogAmount = 2;
input nwogColor = Color.GRAY;
input nwogBorderStyle = Curve.FIRM;
input nwogBorderWidth = 1;
input nwogEQLineStyle = Curve.LONG_DASH;
input nwogEQLineWidth = 1;

# --- NEW DAY OPENING GAPS ---
input showNDOGs = no;
input ndogAmount = 2;
input ndogColor = Color.GRAY;
input ndogBorderStyle = Curve.FIRM;
input ndogBorderWidth = 1;
input ndogEQLineStyle = Curve.LONG_DASH;
input ndogEQLineWidth = 1;

# --- MSS TRACKING ---
input trackMSS = yes;
input mssLineStyle = Curve.FIRM;
input mssLineWidth = 1;
input mssColor = Color.WHITE;
input mssBearColor = Color.RED;
input mssLength = 2;

# --- SESSION LOGIC ---
def cstHour = GetHour() + timeZoneOffset;
def cstMinute = GetMinute();

def inLondon = showLondon and cstHour >= londonStart and cstHour < londonEnd;
def inNYAM = showNYAM and cstHour >= nyamStart and cstHour < nyamEnd;
def inNYPM = showNYPM and cstHour >= nypmStart and cstHour < nypmEnd;
def inAsia = showAsia and (cstHour >= asiaStart or cstHour < asiaEnd);
def inSession5 = showSession5 and (cstHour >= session5Start or cstHour < session5End);
def inSession6 = showSession6 and (cstHour >= session6Start or cstHour < session6End);

AddCloud(if inLondon then high else Double.NaN, if inLondon then low else Double.NaN, sessionLineColor, sessionLineColor);
AddCloud(if inNYAM then high else Double.NaN, if inNYAM then low else Double.NaN, sessionLineColor, sessionLineColor);
AddCloud(if inNYPM then high else Double.NaN, if inNYPM then low else Double.NaN, sessionLineColor, sessionLineColor);
AddCloud(if inAsia then high else Double.NaN, if inAsia then low else Double.NaN, sessionLineColor, sessionLineColor);
AddCloud(if inSession5 then high else Double.NaN, if inSession5 then low else Double.NaN, sessionLineColor, sessionLineColor);
AddCloud(if inSession6 then high else Double.NaN, if inSession6 then low else Double.NaN, sessionLineColor, sessionLineColor);

# --- LEVELS LOGIC (EXAMPLES) ---
def isNewDay = GetDay() <> GetDay()[1];
def isNewWeek = GetWeek() <> GetWeek()[1];
def isNewMonth = GetMonth() <> GetMonth()[1];

def pdh = if isNewDay then high[1] else pdh[1];
def pdl = if isNewDay then low[1] else pdl[1];
def pwh = if isNewWeek then high[1] else pwh[1];
def pwl = if isNewWeek then low[1] else pwl[1];
def pmh = if isNewMonth then high[1] else pmh[1];
def pml = if isNewMonth then low[1] else pml[1];

plot PDH = if alertPDH_PDL then pdh else Double.NaN;
PDH.SetDefaultColor(pdh_pdlLineColor);
PDH.SetLineWeight(pdh_pdlLineWidth);
PDH.SetStyle(pdh_pdlLineStyle);

plot PDL = if alertPDH_PDL then pdl else Double.NaN;
PDL.SetDefaultColor(pdh_pdlLineColor);
PDL.SetLineWeight(pdh_pdlLineWidth);
PDL.SetStyle(pdh_pdlLineStyle);

plot PWH = if alertPWH_PWL then pwh else Double.NaN;
PWH.SetDefaultColor(pwh_pwlLineColor);
PWH.SetLineWeight(pwh_pwlLineWidth);
PWH.SetStyle(pwh_pwlLineStyle);

plot PWL = if alertPWH_PWL then pwl else Double.NaN;
PWL.SetDefaultColor(pwh_pwlLineColor);
PWL.SetLineWeight(pwh_pwlLineWidth);
PWL.SetStyle(pwh_pwlLineStyle);

plot PMH = if alertPMH_PML then pmh else Double.NaN;
PMH.SetDefaultColor(pmh_pmlLineColor);
PMH.SetLineWeight(pmh_pmlLineWidth);
PMH.SetStyle(pmh_pmlLineStyle);

plot PML = if alertPMH_PML then pml else Double.NaN;
PML.SetDefaultColor(pmh_pmlLineColor);
PML.SetLineWeight(pmh_pmlLineWidth);
PML.SetStyle(pmh_pmlLineStyle);

# --- FVG LOGIC (SIMPLE) ---
def bullishFVG = high[2] < low;
def bearishFVG = low[2] > high;

plot BullishFVG = if showFVGs and bullishFVG then low else Double.NaN;
BullishFVG.SetDefaultColor(bullishFVGColor);
BullishFVG.SetLineWeight(fvgEQLineWidth);
BullishFVG.SetStyle(fvgEQLineStyle);

plot BearishFVG = if showFVGs and bearishFVG then high else Double.NaN;
BearishFVG.SetDefaultColor(bearishFVGColor);
BearishFVG.SetLineWeight(fvgEQLineWidth);
BearishFVG.SetStyle(fvgEQLineStyle);

# --- GAPS (NEW WEEK/NEW DAY) ---
# Example: New Week Opening Gap
def isNewWeekBar = isNewWeek;
def nwog = if isNewWeekBar then open else Double.NaN;
plot NWOG = if showNWOGs then nwog else Double.NaN;
NWOG.SetDefaultColor(nwogColor);
NWOG.SetLineWeight(nwogBorderWidth);
NWOG.SetStyle(nwogBorderStyle);

# --- MSS TRACKING (BASIC) ---
def mss = if trackMSS and high > high[1] and low < low[1] then 1 else 0;
plot MSS = if mss then high else Double.NaN;
MSS.SetDefaultColor(mssColor);
MSS.SetLineWeight(mssLineWidth);
MSS.SetStyle(mssLineStyle);

# --- ALERTS (EXAMPLES) ---
Alert(alertPriceCrossSession and (close crosses above pdh or close crosses below pdl), "Price crossed session level", Alert.BAR, Sound.Ding);
Alert(alertFVGAfterRaid and (bullishFVG or bearishFVG), "FVG after raid", Alert.BAR, Sound.Bell);
Alert(alertMSSAfterRaid and mss, "MSS after raid", Alert.BAR, Sound.Ring);
# Advanced Multi-Timeframe & Session Levels Plotter (CST)
# Author: Copilot


# ---- INPUTS ----
input show4HOpen = yes;
input show4HPrevHL = no;
input show4HPrevMid = no;
input show4HShortHand = no;
input color4H = Color.ORANGE;

input showDailyOpen = yes;
input showDailyPrevHL = no;
input showDailyPrevMid = no;
input showDailyShortHand = no;
input colorDaily = Color.CYAN;

input showMondayRange = yes;
input showMondayMid = yes;
input showMondayShortHand = no;
input colorMonday = Color.WHITE;

input showWeeklyOpen = yes;
input showWeeklyPrevHL = yes;
input showWeeklyPrevMid = yes;
input showWeeklyShortHand = no;
input colorWeekly = Color.YELLOW;

input showMonthlyOpen = yes;
input showMonthlyPrevHL = yes;
input showMonthlyPrevMid = yes;
input showMonthlyShortHand = no;
input colorMonthly = Color.GREEN;

input showQuarterlyOpen = yes;
input showQuarterlyPrevHL = no;
input showQuarterlyPrevMid = yes;
input showQuarterlyShortHand = no;
input colorQuarterly = Color.RED;

input showYearlyOpen = yes;
input showYearlyPrevHL = no;
input showYearlyPrevMid = yes;
input showYearlyShortHand = no;
input colorYearly = Color.MAGENTA;

input londonStart = 8;
input londonEnd = 16;
input nyStart = 14;
input nyEnd = 21;
input tokyoStart = 0;
input tokyoEnd = 9;

# Market Open (8:30 AM CST)
input show830 = yes;
input color830 = Color.RED;

# ---- TIMEZONE ADJUSTMENT (CST) ----
def offset = -6; # CST is UTC-6
def cstHour = GetHour() + offset;
def cstMinute = GetMinute();

# ---- SESSION LOGIC ----
def inLondon = cstHour >= londonStart and cstHour < londonEnd;
def inNY = cstHour >= nyStart and cstHour < nyEnd;
def inTokyo = cstHour >= tokyoStart and cstHour < tokyoEnd;

# ---- PERIOD LOGIC ----
def isNewDay = GetDay() <> GetDay()[1];
def isNewWeek = GetWeek() <> GetWeek()[1];
def isNewMonth = GetMonth() <> GetMonth()[1];
def isNewQuarter = (GetMonth() == 1 or GetMonth() == 4 or GetMonth() == 7 or GetMonth() == 10) and isNewMonth;
def isNewYear = GetYear() <> GetYear()[1];

# ---- LEVEL CALCULATIONS ----
# Daily
def dailyOpen = if isNewDay then open else dailyOpen[1];
def dailyHigh = if isNewDay then high else Max(high, dailyHigh[1]);
def dailyLow = if isNewDay then low else Min(low, dailyLow[1]);
def dailyMid = (dailyHigh + dailyLow) / 2;

# Weekly
def weeklyOpen = if isNewWeek then open else weeklyOpen[1];
def weeklyHigh = if isNewWeek then high else Max(high, weeklyHigh[1]);
def weeklyLow = if isNewWeek then low else Min(low, weeklyLow[1]);
def weeklyMid = (weeklyHigh + weeklyLow) / 2;

# Monthly
def monthlyOpen = if isNewMonth then open else monthlyOpen[1];
def monthlyHigh = if isNewMonth then high else Max(high, monthlyHigh[1]);
def monthlyLow = if isNewMonth then low else Min(low, monthlyLow[1]);
def monthlyMid = (monthlyHigh + monthlyLow) / 2;

# Quarterly
def quarterlyOpen = if isNewQuarter then open else quarterlyOpen[1];
def quarterlyHigh = if isNewQuarter then high else Max(high, quarterlyHigh[1]);
def quarterlyLow = if isNewQuarter then low else Min(low, quarterlyLow[1]);
def quarterlyMid = (quarterlyHigh + quarterlyLow) / 2;

# Yearly
def yearlyOpen = if isNewYear then open else yearlyOpen[1];
def yearlyHigh = if isNewYear then high else Max(high, yearlyHigh[1]);
def yearlyLow = if isNewYear then low else Min(low, yearlyLow[1]);
def yearlyMid = (yearlyHigh + yearlyLow) / 2;


# ---- PLOTTING ----
# Daily
plot pDailyOpen = if showDailyOpen then dailyOpen else Double.NaN;
pDailyOpen.SetDefaultColor(colorDaily);
pDailyOpen.SetLineWeight(2);
pDailyOpen.SetStyle(Curve.SHORT_DASH);
AddChartBubble(showDailyShortHand and !IsNaN(pDailyOpen), pDailyOpen, "D O", colorDaily, yes);

plot pDailyPrevHL = if showDailyPrevHL then dailyHigh else Double.NaN;
pDailyPrevHL.SetDefaultColor(colorDaily);
plot pDailyPrevMid = if showDailyPrevMid then dailyMid else Double.NaN;
pDailyPrevMid.SetDefaultColor(colorDaily);

# Weekly
plot pWeeklyOpen = if showWeeklyOpen then weeklyOpen else Double.NaN;
pWeeklyOpen.SetDefaultColor(colorWeekly);
AddChartBubble(showWeeklyShortHand and !IsNaN(pWeeklyOpen), pWeeklyOpen, "W O", colorWeekly, yes);

plot pWeeklyPrevHL = if showWeeklyPrevHL then weeklyHigh else Double.NaN;
pWeeklyPrevHL.SetDefaultColor(colorWeekly);
plot pWeeklyPrevMid = if showWeeklyPrevMid then weeklyMid else Double.NaN;
pWeeklyPrevMid.SetDefaultColor(colorWeekly);

# Monthly
plot pMonthlyOpen = if showMonthlyOpen then monthlyOpen else Double.NaN;
pMonthlyOpen.SetDefaultColor(colorMonthly);
AddChartBubble(showMonthlyShortHand and !IsNaN(pMonthlyOpen), pMonthlyOpen, "M O", colorMonthly, yes);

plot pMonthlyPrevHL = if showMonthlyPrevHL then monthlyHigh else Double.NaN;
pMonthlyPrevHL.SetDefaultColor(colorMonthly);
plot pMonthlyPrevMid = if showMonthlyPrevMid then monthlyMid else Double.NaN;
pMonthlyPrevMid.SetDefaultColor(colorMonthly);

# Quarterly
plot pQuarterlyOpen = if showQuarterlyOpen then quarterlyOpen else Double.NaN;
pQuarterlyOpen.SetDefaultColor(colorQuarterly);
AddChartBubble(showQuarterlyShortHand and !IsNaN(pQuarterlyOpen), pQuarterlyOpen, "Q O", colorQuarterly, yes);

plot pQuarterlyPrevMid = if showQuarterlyPrevMid then quarterlyMid else Double.NaN;
pQuarterlyPrevMid.SetDefaultColor(colorQuarterly);

# Yearly
plot pYearlyOpen = if showYearlyOpen then yearlyOpen else Double.NaN;
pYearlyOpen.SetDefaultColor(colorYearly);
AddChartBubble(showYearlyShortHand and !IsNaN(pYearlyOpen), pYearlyOpen, "Y O", colorYearly, yes);

plot pYearlyPrevMid = if showYearlyPrevMid then yearlyMid else Double.NaN;
pYearlyPrevMid.SetDefaultColor(colorYearly);

# Market Open 8:30 AM CST line
def isMarketOpenBar = SecondsFromTime(830) == 0;
plot MarketOpen830 = if show830 and isMarketOpenBar then open else Double.NaN;
MarketOpen830.SetDefaultColor(color830);
MarketOpen830.SetLineWeight(2);
MarketOpen830.SetStyle(Curve.LONG_DASH);

# ---- SESSIONS ----
def sessionLondon = inLondon;
def sessionNY = inNY;
def sessionTokyo = inTokyo;

AddCloud(if sessionLondon then high else Double.NaN, if sessionLondon then low else Double.NaN, colorDaily, colorDaily);
AddCloud(if sessionNY then high else Double.NaN, if sessionNY then low else Double.NaN, colorWeekly, colorWeekly);
AddCloud(if sessionTokyo then high else Double.NaN, if sessionTokyo then low else Double.NaN, colorMonthly, colorMonthly);

# ---- 4H, Monday Range, etc. can be added with similar logic using aggregation period or custom logic ----

# ---- END ----
